#################################################
# Imports
#################################################

from flask import Flask, jsonify
from flask_cors import CORS, cross_origin
from bson import json_util
from flask_pymongo import PyMongo
from flask_cors import CORS, cross_origin
import requests
import json
import pandas as pd

#################################################
# Flask Setup
#################################################

app = Flask(__name__)
CORS(app, resources={
    r"/*": {
        "origins": "*"
    }
})
app.config['CORS_HEADERS'] = 'Content-Type'
app.config['CORS_ORIGINS'] = '*'
# Use flask_pymongo to set up mongo connection
app.config["MONGO_URI"] = "mongodb://localhost:27017/Top_100"
mongo = PyMongo(app)



#################################################
# Create Function to Import Data
#################################################
def dataload():
     #pull database as a variable
     restaurants = mongo.db.Top_NYC_Restaurant_By_Type
     #drop any existing data inside of the table - this will prevent you from adding multiple 
     # sets of the same data if you were to ever run this app more than once  
     restaurants.drop()
     #read the data in
     restaurant_data = pd.read_csv("../csv_repository/Overall_List/Top_100_NY_day.csv")
     restaurant_data = restaurant_data.reset_index(drop = True)
     #insert the data into the database loading it in json format 
     #the orient = "index" reads it in as rows as opposed to columns
     temp_restaurant = json.loads(restaurant_data.to_json(orient = "index"))
     ##print(temp_restaurant)
     for i in range(len(temp_restaurant)):
        restaurants.insert_one(temp_restaurant[str(i)])
     #pull database as a variable
     attractions = mongo.db.Top_Attractions_NYC
     #drop any existing data inside of the table - this will prevent you from adding multiple 
     # sets of the same data if you were to ever run this app more than once  
     attractions.drop()
     #read the data in
     attraction_data = pd.read_csv("../csv_repository/Overall_List/Top_NYC_Attractions.csv", encoding = 'ISO-8859-1')
     attraction_data = attraction_data.reset_index(drop = True)
     #insert the data into the database loading it in json format 
     #the orient = "index" reads it in as rows as opposed to columns
     temp_attractions = json.loads(attraction_data.to_json(orient = "index"))
     ##print(temp_attractions)
     for i in range(len(temp_attractions)):
        attractions.insert_one(temp_attractions[str(i)])
#run the function
dataload()

#################################################
# Flask Routes
#################################################

#build route in API
@app.route("/api/v1.0/restaurants")
#define function 
def restaurant():
    #read in the information from the database that was loaded in by the previous function 
    restaurants = mongo.db.Top_NYC_Restaurant_By_Type
    #look through the information, could specify to find something specific, in this case it is pulling in everything
    search = restaurants.find({})
    #load all this information into a json to display in the API generated by this app 
    restaurant_json = json.loads(json_util.dumps(search))
    #display the API in json format 
    return jsonify(restaurant_json)

#build route in API
@app.route("/api/v1.0/attractions")
#define function 
def attraction():
    #read in the information from the database that was loaded in by the previous function 
    attractions = mongo.db.Top_Attractions_NYC
    #look through the information, could specify to find something specific, in this case it is pulling in everything
    search = attractions.find({})
    #load all this information into a json to display in the API generated by this app 
    attractions_json = json.loads(json_util.dumps(search))
    #display the API in json format 
    return jsonify(attractions_json)


##Test Code from Mindy
##@app.route("/api/categories/<category>")
#def latlngFilter(category):
 #   restaurants = mongo.db.Top_100
  #  searchRest = restaurants.findOne({})
   # searchCat = restauratns.find({"Category": searchRest.})
   # restaurant_json = json.loads(json_util.dumps(search))

@app.route("/")
def welcome():
    return (
        f"Welcome to the NYC Popular Restaurant and Attractions API!<br/>"
        f"Available Routes:<br/>"
        f"/api/v1.0/restaurants<br/>"
        f"/api/v1.0/attractions"
    )

if __name__ == "__main__":
    app.run(debug=True)